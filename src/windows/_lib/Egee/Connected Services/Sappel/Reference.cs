//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.26323.1
// 
namespace Egee.Proxy.Sappel {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Sappel.ISappelService")]
    internal interface ISappelService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISappelService/Init", ReplyAction="http://tempuri.org/ISappelService/InitResponse")]
        System.Threading.Tasks.Task<Egee.Proxy.Sappel.InitResponse> InitAsync(Egee.Proxy.Sappel.InitRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISappelService/GetVersion", ReplyAction="http://tempuri.org/ISappelService/GetVersionResponse")]
        System.Threading.Tasks.Task<Egee.Proxy.Sappel.GetVersionResponse> GetVersionAsync(Egee.Proxy.Sappel.GetVersionRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Init", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class InitRequest {
        
        public InitRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="InitResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class InitResponse {
        
        public InitResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetVersion", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class GetVersionRequest {
        
        public GetVersionRequest() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetVersionResponse", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    internal partial class GetVersionResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string GetVersionResult;
        
        public GetVersionResponse() {
        }
        
        public GetVersionResponse(string GetVersionResult) {
            this.GetVersionResult = GetVersionResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal interface ISappelServiceChannel : Egee.Proxy.Sappel.ISappelService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    internal partial class SappelServiceClient : System.ServiceModel.ClientBase<Egee.Proxy.Sappel.ISappelService>, Egee.Proxy.Sappel.ISappelService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SappelServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SappelServiceClient.GetBindingForEndpoint(endpointConfiguration), SappelServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SappelServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SappelServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SappelServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SappelServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SappelServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<Egee.Proxy.Sappel.InitResponse> InitAsync(Egee.Proxy.Sappel.InitRequest request) {
            return base.Channel.InitAsync(request);
        }
        
        public System.Threading.Tasks.Task<Egee.Proxy.Sappel.GetVersionResponse> GetVersionAsync(Egee.Proxy.Sappel.GetVersionRequest request) {
            return base.Channel.GetVersionAsync(request);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISappelService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ISappelService)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISappelService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:9001/SappelService");
            }
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_ISappelService)) {
                return new System.ServiceModel.EndpointAddress(new System.Uri("net.tcp://localhost:9002/SappelService"), new System.ServiceModel.SpnEndpointIdentity("host/FIXDEV07.egee.local"));
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_ISappelService,
            
            NetTcpBinding_ISappelService,
        }
    }
}
